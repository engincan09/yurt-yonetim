// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using YurtYonetim.Dal.EfCore;

namespace YurtYonetim.Dal.Migrations
{
    [DbContext(typeof(YurtYonetimContext))]
    [Migration("20220703081526_TelefonNoEklendi")]
    partial class TelefonNoEklendi
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("YurtYonetim.Entity.Models.Systems.Lookup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("BooleanValue1");

                    b.Property<bool?>("BooleanValue2");

                    b.Property<string>("Code")
                        .HasMaxLength(50);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int?>("CreatedUserId");

                    b.Property<int>("DataStatus");

                    b.Property<DateTime?>("LastUpdatedAt");

                    b.Property<int?>("LastUpdatedUserId");

                    b.Property<int?>("LookupTypeId");

                    b.Property<int?>("LookupTypeId1");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<int?>("ParentId");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("LastUpdatedUserId");

                    b.HasIndex("LookupTypeId1");

                    b.HasIndex("ParentId");

                    b.ToTable("Lookup");
                });

            modelBuilder.Entity("YurtYonetim.Entity.Models.Systems.LookupType", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Description")
                        .HasMaxLength(500);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.HasKey("Id");

                    b.ToTable("LookupType");

                    b.HasData(
                        new
                        {
                            Id = 8,
                            Name = "Cinsiyet"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Ülke"
                        },
                        new
                        {
                            Id = 10,
                            Name = "İl"
                        },
                        new
                        {
                            Id = 11,
                            Name = "İlçe"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Döviz"
                        });
                });

            modelBuilder.Entity("YurtYonetim.Entity.Models.Systems.Page", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("AllName")
                        .HasMaxLength(250);

                    b.Property<string>("AllRouterLink")
                        .HasMaxLength(250);

                    b.Property<string>("Color")
                        .HasMaxLength(10);

                    b.Property<string>("Description")
                        .HasMaxLength(250);

                    b.Property<bool>("HomeWidget");

                    b.Property<string>("Icon")
                        .HasMaxLength(50);

                    b.Property<bool>("MenuShow");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(75);

                    b.Property<short>("Order");

                    b.Property<int?>("ParentId");

                    b.Property<string>("RouterLink")
                        .HasMaxLength(100);

                    b.Property<string>("WidgetIcon")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Pages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AllName = "Yönetim Paneli",
                            AllRouterLink = "/yonetim",
                            HomeWidget = false,
                            MenuShow = true,
                            Name = "Yönetim Paneli",
                            Order = (short)0,
                            RouterLink = "/yonetim"
                        },
                        new
                        {
                            Id = 2,
                            AllName = "Yönetim Paneli / Ana Sayfa",
                            AllRouterLink = "/yonetim/ana-sayfa",
                            HomeWidget = false,
                            Icon = "fa fa-home",
                            MenuShow = true,
                            Name = "Ana Sayfa",
                            Order = (short)0,
                            ParentId = 1,
                            RouterLink = "/ana-sayfa"
                        },
                        new
                        {
                            Id = 3,
                            AllName = "Yönetim Paneli / İdari İşler",
                            AllRouterLink = "/yonetim/idari-isler",
                            HomeWidget = false,
                            Icon = "fa fa-copy",
                            MenuShow = true,
                            Name = "İdari İşler",
                            Order = (short)1,
                            ParentId = 1,
                            RouterLink = "/idari-isler"
                        },
                        new
                        {
                            Id = 4,
                            AllName = "Yönetim Paneli / İdari İşler/ Kullanıcı İşlemleri",
                            AllRouterLink = "/yonetim/idari-isler/kullanici-islemleri",
                            HomeWidget = false,
                            Icon = "fa fa-user",
                            MenuShow = true,
                            Name = "Kullanıcı İşlemleri",
                            Order = (short)1,
                            ParentId = 3,
                            RouterLink = "/kullanici-islemleri"
                        },
                        new
                        {
                            Id = 5,
                            AllName = "Yönetim Paneli / İdari İşler/ Kullanıcı İşlemleri / Tüm Kullanıcılar",
                            AllRouterLink = "/yonetim/idari-isler/kullanici-islemleri/tum-kullanicilar",
                            HomeWidget = false,
                            MenuShow = true,
                            Name = "Tüm Kullanıcılar",
                            Order = (short)0,
                            ParentId = 4,
                            RouterLink = "/tum-kullanicilar"
                        },
                        new
                        {
                            Id = 6,
                            AllName = "Yönetim Paneli / İdari İşler/ Kullanıcı İşlemleri / Yeni Kullanıcı",
                            AllRouterLink = "/yonetim/idari-isler/kullanici-islemleri/tum-kullanicilar/yeni-kullanici",
                            HomeWidget = false,
                            MenuShow = true,
                            Name = "Yeni Kullanıcı",
                            Order = (short)1,
                            ParentId = 4,
                            RouterLink = "/yeni-kullanici"
                        });
                });

            modelBuilder.Entity("YurtYonetim.Entity.Models.Systems.PagePermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int?>("CreatedUserId");

                    b.Property<int>("DataStatus");

                    b.Property<bool>("Forbidden");

                    b.Property<DateTime?>("LastUpdatedAt");

                    b.Property<int?>("LastUpdatedUserId");

                    b.Property<int>("PageId");

                    b.Property<int?>("RoleId");

                    b.Property<int?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("LastUpdatedUserId");

                    b.HasIndex("PageId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("PagePermissions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2020, 3, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedUserId = 1,
                            DataStatus = 2,
                            Forbidden = false,
                            PageId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2020, 3, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedUserId = 1,
                            DataStatus = 2,
                            Forbidden = false,
                            PageId = 2,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2020, 3, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedUserId = 1,
                            DataStatus = 2,
                            Forbidden = false,
                            PageId = 3,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2020, 3, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedUserId = 1,
                            DataStatus = 2,
                            Forbidden = false,
                            PageId = 4,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2020, 3, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedUserId = 1,
                            DataStatus = 2,
                            Forbidden = false,
                            PageId = 5,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2020, 3, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedUserId = 1,
                            DataStatus = 2,
                            Forbidden = false,
                            PageId = 6,
                            RoleId = 1
                        });
                });

            modelBuilder.Entity("YurtYonetim.Entity.Models.Users.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int?>("CreatedUserId");

                    b.Property<int>("DataStatus");

                    b.Property<DateTime?>("LastUpdatedAt");

                    b.Property<int?>("LastUpdatedUserId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("LastUpdatedUserId");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2020, 3, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataStatus = 2,
                            Name = "Admin"
                        });
                });

            modelBuilder.Entity("YurtYonetim.Entity.Models.Users.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int?>("CreatedUserId");

                    b.Property<int>("DataStatus");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<DateTime?>("LastUpdatedAt");

                    b.Property<int?>("LastUpdatedUserId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Password")
                        .HasMaxLength(150);

                    b.Property<string>("PhoneNumber");

                    b.Property<string>("Photo");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.Property<string>("Username")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId")
                        .IsUnique()
                        .HasFilter("[CreatedUserId] IS NOT NULL");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2020, 3, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataStatus = 2,
                            Email = "admin@mail.com",
                            FullName = "Yönetici Admin",
                            Name = "Yönetici",
                            Password = "9K7Cwg3Qw/8FR/S9VvrNdgl8znxhPagMZ4QrajV/3AQ=",
                            Surname = "Admin"
                        });
                });

            modelBuilder.Entity("YurtYonetim.Entity.Models.Users.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int?>("CreatedUserId");

                    b.Property<int>("DataStatus");

                    b.Property<DateTime?>("LastUpdatedAt");

                    b.Property<int?>("LastUpdatedUserId");

                    b.Property<int>("RoleId");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("LastUpdatedUserId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2020, 3, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataStatus = 2,
                            RoleId = 1,
                            UserId = 1
                        });
                });

            modelBuilder.Entity("YurtYonetim.Entity.Models.Users.UserSession", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("LoginAt");

                    b.Property<string>("RemoteIpAddress")
                        .HasMaxLength(30);

                    b.Property<string>("RequestHeader");

                    b.Property<string>("Token")
                        .HasMaxLength(1500);

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserSessions");
                });

            modelBuilder.Entity("YurtYonetim.Entity.Models.Systems.Lookup", b =>
                {
                    b.HasOne("YurtYonetim.Entity.Models.Users.User", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("YurtYonetim.Entity.Models.Users.User", "LastUpdatedUser")
                        .WithMany()
                        .HasForeignKey("LastUpdatedUserId");

                    b.HasOne("YurtYonetim.Entity.Models.Systems.LookupType", "LookupType")
                        .WithMany("Lookup")
                        .HasForeignKey("LookupTypeId1");

                    b.HasOne("YurtYonetim.Entity.Models.Systems.Lookup", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId");
                });

            modelBuilder.Entity("YurtYonetim.Entity.Models.Systems.Page", b =>
                {
                    b.HasOne("YurtYonetim.Entity.Models.Systems.Page", "Parent")
                        .WithMany("Childs")
                        .HasForeignKey("ParentId");
                });

            modelBuilder.Entity("YurtYonetim.Entity.Models.Systems.PagePermission", b =>
                {
                    b.HasOne("YurtYonetim.Entity.Models.Users.User", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("YurtYonetim.Entity.Models.Users.User", "LastUpdatedUser")
                        .WithMany()
                        .HasForeignKey("LastUpdatedUserId");

                    b.HasOne("YurtYonetim.Entity.Models.Systems.Page", "Page")
                        .WithMany("PagePermission")
                        .HasForeignKey("PageId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("YurtYonetim.Entity.Models.Users.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId");

                    b.HasOne("YurtYonetim.Entity.Models.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("YurtYonetim.Entity.Models.Users.Role", b =>
                {
                    b.HasOne("YurtYonetim.Entity.Models.Users.User", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("YurtYonetim.Entity.Models.Users.User", "LastUpdatedUser")
                        .WithMany()
                        .HasForeignKey("LastUpdatedUserId");
                });

            modelBuilder.Entity("YurtYonetim.Entity.Models.Users.User", b =>
                {
                    b.HasOne("YurtYonetim.Entity.Models.Users.User", "CreatedUser")
                        .WithOne("LastUpdatedUser")
                        .HasForeignKey("YurtYonetim.Entity.Models.Users.User", "CreatedUserId");
                });

            modelBuilder.Entity("YurtYonetim.Entity.Models.Users.UserRole", b =>
                {
                    b.HasOne("YurtYonetim.Entity.Models.Users.User", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("YurtYonetim.Entity.Models.Users.User", "LastUpdatedUser")
                        .WithMany()
                        .HasForeignKey("LastUpdatedUserId");

                    b.HasOne("YurtYonetim.Entity.Models.Users.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("YurtYonetim.Entity.Models.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("YurtYonetim.Entity.Models.Users.UserSession", b =>
                {
                    b.HasOne("YurtYonetim.Entity.Models.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
